# -*- coding: utf-8 -*-
"""model baru.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BCIobTrB9juXrLHnPo6DQ_Ylm3KIgHPu
"""

!pip install tensorflowjs

import tensorflow as tf
print(tf.__version__)

import pandas as pd
import numpy as np
import tensorflow as tf
import tensorflowjs as tfjs
import json
import joblib

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from tensorflow.keras.models import Sequential, save_model, load_model
from tensorflow.keras.layers import Dense, Dropout, Input
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.optimizers import Adam

# Load data
foods = pd.read_csv('Food.csv')
drinks = pd.read_csv('Beverage.csv')

# Combine data
data = pd.concat([foods, drinks])

# Preprocess data
def preprocess_amount(amount):
    if isinstance(amount, str):
        return float(amount.split('/')[0].replace('g', '').replace('mL', ''))
    else:
        return amount

data['Amount for Diet (g/mL)'] = data['Amount for Diet (g/mL)'].apply(preprocess_amount)
data['Amount for Bulking (g/mL)'] = data['Amount for Bulking (g/mL)'].apply(preprocess_amount)

# Create feature for diet or bulking
data['Is_Diet'] = data['Amount for Diet (g/mL)'].notnull().astype(int)
data['Is_Bulking'] = data['Amount for Bulking (g/mL)'].notnull().astype(int)

# Input features and target
X = data[['Is_Diet', 'Is_Bulking', 'Calories (kcal)', 'Protein (g)', 'Carbohydrates (g)', 'Fats (g)']]
y = data['Category']

# Encode labels to integers
label_encoder = LabelEncoder()
y_encoded = label_encoder.fit_transform(y)

# Convert labels to one-hot encoding
y_encoded = to_categorical(y_encoded)

# Split data
X_train, X_test, y_train, y_test = train_test_split(X, y_encoded, test_size=0.2, random_state=42)

# Build model
def build_model(input_shape, num_classes):
    model = Sequential([
        Input(shape=input_shape),
        Dense(512, activation='relu', kernel_regularizer=tf.keras.regularizers.L2(0.001)),
        Dropout(0.2),
        Dense(256, activation='relu', kernel_regularizer=tf.keras.regularizers.L2(0.001)),
        Dropout(0.2),
        Dense(128, activation='relu', kernel_regularizer=tf.keras.regularizers.L2(0.001)),
        Dropout(0.2),
        Dense(64, activation='relu', kernel_regularizer=tf.keras.regularizers.L2(0.001)),
        Dropout(0.2),
        Dense(num_classes, activation='softmax')
    ])
    return model

# Compile model
model = build_model(X_train.shape[1:], y_encoded.shape[1])
model.compile(optimizer=Adam(learning_rate=0.0001), loss='categorical_crossentropy', metrics=['accuracy'])

# Train model
model.fit(X_train, y_train, epochs=50, batch_size=64, validation_data=(X_test, y_test))

# Save LabelEncoder as JSON
#label_encoder_json = label_encoder.classes_.tolist()
#with open('label_encoder.json', 'w') as f:
#    json.dump(label_encoder_json, f)

# Save LabelEncoder as Pickle
joblib.dump(label_encoder, 'label_encoder.pkl')

# Save model
model.save('food_recommendation_model.h5')

# Convert model to TensorFlow.js
#tfjs.converters.save_keras_model(model, 'tfjs_model')

import pandas as pd

# Load datasets
food_data = pd.read_csv('Food.csv')
beverage_data = pd.read_csv('Beverage.csv')

# Define function for filtering food
def filter_food(height, weight, desired_weight, is_diet, num_choices=50):
    # Calculate the caloric needs
    if is_diet:
        calories_needed = (weight - desired_weight) * 7700 / 30  # Simple weight loss estimation
    else:
        calories_needed = (desired_weight - weight) * 7700 / 30  # Simple weight gain estimation

    # Filter food data
    if is_diet:
        filtered_food = food_data[(food_data['Category'] == 'Diet') & (food_data['Calories (kcal)'] <= calories_needed)].sample(min(num_choices, len(food_data)))
    else:
        filtered_food = food_data[(food_data['Category'] == 'Bulking') & (food_data['Calories (kcal)'] <= calories_needed)].sample(min(num_choices, len(food_data)))

    return filtered_food

# Define function for filtering beverages
def filter_beverages(height, weight, desired_weight, is_diet, num_choices=50):
    # Calculate the caloric needs
    if is_diet:
        calories_needed = (weight - desired_weight) * 7700 / 30  # Simple weight loss estimation
    else:
        calories_needed = (desired_weight - weight) * 7700 / 30  # Simple weight gain estimation

    # Filter beverage data
    if is_diet:
        filtered_beverages = beverage_data[(beverage_data['Category'] == 'Diet') & (beverage_data['Calories (kcal)'] <= calories_needed)].sample(min(num_choices, len(beverage_data)))
    else:
        filtered_beverages = beverage_data[(beverage_data['Category'] == 'Bulking') & (beverage_data['Calories (kcal)'] <= calories_needed)].sample(min(num_choices, len(beverage_data)))

    return filtered_beverages

# Test the filtering functions
filtered_food = filter_food(170, 69, 80, is_diet=False)
filtered_drinks = filter_beverages(170, 69, 80, is_diet=False)

# Print Food Recommendations
print("Food Recommendations:")
for idx, row in filtered_food.iterrows():
    print(f"- Food Name: {row['Food Name']}")
    print(f"  Ingredients: {row['Ingredients']}")
    print(f"  Calories (kcal): {row['Calories (kcal)']}")
    print(f"  Protein (g): {row['Protein (g)']}")
    print(f"  Carbohydrates (g): {row['Carbohydrates (g)']}")
    print(f"  Fats (g): {row['Fats (g)']}\n")

# Print Drink Recommendations
print("\nDrink Recommendations:")
for idx, row in filtered_drinks.iterrows():
    print(f"- Beverage Name: {row['Beverage Name']}")
    print(f"  Ingredients: {row['Ingredients']}")
    print(f"  Calories (kcal): {row['Calories (kcal)']}")
    print(f"  Protein (g): {row['Protein (g)']}")
    print(f"  Carbohydrates (g): {row['Carbohydrates (g)']}")
    print(f"  Fats (g): {row['Fats (g)']}\n")